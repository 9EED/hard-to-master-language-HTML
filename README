## instruction set
psh  int -> pushes a number to the top of the stack
pop      -> removes the top number from the stack
add      -> adds up the top two numbers of the stack
sub      -> subtracts the second from the top most elements in the stack
mul      -> multiplies the top two numbers of the stack
div      -> divides the top two numbers of the stack returns integer divistion and remainder (division on top)
ife  int -> skips the next [arg] instruction if the top two elements are not equal
ifn  int -> skips the next [arg] instruction if the top two elements are equal
ifg  int -> skips the next [arg] instruction if the second top element is not greater than the top one
ifg  int -> skips the next [arg] instruction if the second top element is not lesser  than the top one
jmp  int -> jumps the program to a line
jmb  int -> jumps the program by n lines
jml  lbl -> jumps the program to a label
lbl:     -> ends the previous label and begins a new one
hlt      -> halts the label
red      -> reads and int input
prt      -> writes the top int of the stack to termainal
wrt      -> writes the top int of the stack as character to termainal
log  msg -> writes a message to termainal
pss      -> does nothing


## instructions
html programs start at main label and end at mains hlt or the end of the file.

when a label is called the program will jump to the label and continue from there.

you must hlt out of a label otherwise the program will continue to the next label.

when you hlt out of a label the program will continue where it left off before jml was called.

arithmetic operations dont pop the top two elements and push the result to the stack

## the stack
the stack is a list of integers that the program can push and pop from.
